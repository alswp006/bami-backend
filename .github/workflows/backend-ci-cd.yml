# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Bami Backend CI/CD
run-name: ${{ github.actor }} 님이 안전한 개발을 위해 test를 하고 있습니다! 🚀

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Download API key from private repository
      uses: actions/checkout@v2
      with:
        repository: ktb1-eight/api-key
        token: ${{ secrets.TOKEN_GITHUB }}
        path: api-key

    - name: Copy application-dev.yml
      run: |
        cp api-key/application-dev.yml src/main/resources/

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Run chmod to make gradlew executable
      run: chmod +x ./gradlew

    - name: Build with Gradle
      run: ./gradlew build -x test
      shell: bash

    - name: Build Docker image
      run: docker build -t bami-backend:latest .

    - name: Save Docker image as tar
      run: docker save -o bami-backend.tar bami-backend:latest

    - name: Upload Docker image tar to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_BACKEND }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_BACKEND }}
      run: aws s3 cp bami-backend.tar s3://bami-practice-s3/path/to/bami-backend.tar

    - name: Add SSH key
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to EC2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_BACKEND }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_BACKEND }}
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << 'EOF'
        aws s3 cp s3://bami-practice-s3/path/to/bami-backend.tar /home/ec2-user/bami-backend.tar
        docker load -i /home/ec2-user/bami-backend.tar
        docker stop bami-backend || true
        docker rm bami-backend || true
        docker run -d -p 8080:8080 --name bami-backend \
          -e DB_URL=$(aws ssm get-parameter --name "/bami/DB_URL" --with-decryption --query "Parameter.Value" --output text) \
          -e DB_USERNAME=$(aws ssm get-parameter --name "/bami/DB_USERNAME" --query "Parameter.Value" --output text) \
          -e DB_PASSWORD=$(aws ssm get-parameter --name "/bami/DB_PASSWORD" --with-decryption --query "Parameter.Value" --output text) \
          bami-backend:latest
        EOF
